# -*- coding: utf-8 -*-
"""TRANSFORM - All Transactions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12vMDVpYi2xS4fPp6AM7y2A6f9EJ0WF5W

# INITIALIZATION

## Imports
"""

import pandas as pd
import numpy as np
import os, shutil
from datetime import datetime
from dateutil import parser
import requests

from google.colab import drive
drive.mount('/content/drive')

"""## Directory Mapping"""

tgt_dir_hist = "/content/drive/MyDrive/Projects/02 - Data Transformation/House & Senate Stock Tracking/All Transactions/historical/"
tgt_dir_tost = "/content/drive/MyDrive/Projects/02 - Data Transformation/House & Senate Stock Tracking/All Transactions/top-of-stack/"

date_string = datetime.today().strftime('%Y-%m-%d')

"""## Functions"""

def Parse_Date(string_date_field):
  try:
    parsed_version = parser.parse(string_date_field)
    return pd.to_datetime(parsed_version)
  except ValueError:
    return np.NaN  


def Normalize_TransactionType_L1(native_transaction_type):
  l1_dict = {"Sale (Full)":"Sale","sale_full":"Sale","sale_partial":"Sale",
             "Sale (Partial)":"Sale", "Purchase":"Purchase","Exchange":"Exchange",
             "purchase":"Purchase","exchange":"Exchange"}
  return l1_dict[native_transaction_type]


def Normalize_TransactionType_L2(native_transaction_type):
  l2_dict = {"Sale (Full)":"Sale (Full)","sale_full":"Sale (Full)","sale_partial":"Sale (Partial)",
             "Sale (Partial)":"Sale (Partial)", "Purchase":"Purchase","Exchange":"Exchange",
             "purchase":"Purchase","exchange":"Exchange"}
  return l2_dict[native_transaction_type]

"""## Delete File from Target Top-of-Stack Directory"""

for filename in os.listdir(tgt_dir_tost):
    file_path = os.path.join(tgt_dir_tost, filename)
    try:
        if os.path.isfile(file_path) or os.path.islink(file_path):
            os.unlink(file_path)
        elif os.path.isdir(file_path):
            shutil.rmtree(file_path)
    except Exception as e:
        print('Failed to delete %s. Reason: %s' % (file_path, e))

"""## Read Data: Senator Transactions"""

senate_dir = "/content/drive/MyDrive/Projects/01 - Data Staging/House & Senate Stock Tracking/All Transactions - Senators/top-of-stack/"

if len(os.listdir(senate_dir)) > 1:
  print("ERROR: More than 1 file in top-of-stack folder!")
elif len(os.listdir(senate_dir)) == 1:
  print("VALIDATION PASSED: Only 1 file in top-of-stack folder.")
  print("------------------------------------------------------")
  for filename in os.listdir(senate_dir):
    print(os.path.join(senate_dir, filename))
    senate_raw = pd.read_csv(os.path.join(senate_dir, filename))
else:
  print("ERROR: Undefined!")

"""## Read Data: Representative Transactions"""

house_dir = "/content/drive/MyDrive/Projects/01 - Data Staging/House & Senate Stock Tracking/All Transactions - Representatives/top-of-stack/"

if len(os.listdir(house_dir)) > 1:
  print("ERROR: More than 1 file in top-of-stack folder!")
elif len(os.listdir(house_dir)) == 1:
  print("VALIDATION PASSED: Only 1 file in top-of-stack folder.")
  print("------------------------------------------------------")
  for filename in os.listdir(house_dir):
    print(os.path.join(house_dir, filename))
    house_raw = pd.read_csv(os.path.join(house_dir, filename))
else:
  print("ERROR: Undefined!")

"""## Read Data: All Tickers"""

ticker_dir = "/content/drive/MyDrive/Projects/01 - Data Staging/House & Senate Stock Tracking/All Tickers/top-of-stack/"

if len(os.listdir(ticker_dir)) > 1:
  print("ERROR: More than 1 file in top-of-stack folder!")
elif len(os.listdir(ticker_dir)) == 1:
  print("VALIDATION PASSED: Only 1 file in top-of-stack folder.")
  print("------------------------------------------------------")
  for filename in os.listdir(ticker_dir):
    print(os.path.join(ticker_dir, filename))
    all_tickers = pd.read_csv(os.path.join(ticker_dir, filename))
else:
  print("ERROR: Undefined!")

"""# SCRIPT

## Combine Senator & Representative Data
"""

senate_union = senate_raw.copy(deep=True)[["transaction_date","disclosure_date","owner","ticker","type","amount","senator"]]

senate_union = senate_union.rename(columns={"transaction_date":"Transaction Date","disclosure_date":"Disclosure Date","owner":"Owner","ticker":"Ticker",
                                            "type":"Transaction Type","amount":"Trade Value Range","senator":"Politician"})

senate_union["Politician Type"] = "Senator"

house_union = house_raw.copy(deep=True)[["transaction_date","disclosure_date","owner","ticker","type","amount","representative"]]

house_union = house_union.rename(columns={"transaction_date":"Transaction Date","disclosure_date":"Disclosure Date","owner":"Owner","ticker":"Ticker",
                                            "type":"Transaction Type","amount":"Trade Value Range","representative":"Politician"})

house_union["Politician Type"] = "Representative"

all_transactions = pd.concat([senate_union,house_union])

"""## Data Cleaning / Normalization"""

# NORMALIZE DATE FIELDS
all_transactions["Disclosure Date"] = pd.to_datetime(all_transactions["Disclosure Date"])
all_transactions["Transaction Date"] = all_transactions.apply(lambda x: Parse_Date(x["Transaction Date"]),axis=1)

# GET RID OF USELESS TICKERS / TRANSACTION DATES
all_transactions = all_transactions[(~(all_transactions["Ticker"].isnull())) & (~(all_transactions["Transaction Date"].isnull()))]
all_transactions = all_transactions[all_transactions["Ticker"] != "--"]

all_transactions["Transaction Type (Lvl 1)"] = all_transactions.apply(lambda x: Normalize_TransactionType_L1(x["Transaction Type"]),axis=1)
all_transactions["Transaction Type (Lvl 2)"] = all_transactions.apply(lambda x: Normalize_TransactionType_L2(x["Transaction Type"]),axis=1)

all_transactions = all_transactions.drop(columns=["Transaction Type"])

"""## Join to Tickers Data"""

print(len(all_transactions))
all_transactions = all_transactions.merge(all_tickers[["ticker","name"]],how="left",left_on="Ticker",right_on="ticker")
all_transactions = all_transactions.drop(columns=["ticker"])
all_transactions = all_transactions.rename(columns={"name":"Company"})
print(len(all_transactions))

all_transactions

"""## Export to Historical & Top of Stack Folders"""

all_transactions.to_csv(tgt_dir_tost + "all_transactions_" + date_string + ".csv",index=False)
all_transactions.to_csv(tgt_dir_hist + "all_transactions_" + date_string + ".csv",index=False)